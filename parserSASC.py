#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import generator_stop

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class SASCBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=re.compile('(?s)[ \\t\\r\\f\\v]+'),
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super().__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class SASCParser(Parser):
    def __init__(
        self,
        whitespace=re.compile('(?s)[ \\t\\r\\f\\v]+'),
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        tokenizercls=SASCBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super().__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            tokenizercls=tokenizercls,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        self._file_()
        self._check_eof()

    @tatsumasu()
    def _cell_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('0')
                self._cut()
            with self._option():
                self._token('1')
                self._cut()
            with self._option():
                self._token('2')
                self._cut()
            self._error('expecting one of: 0 1 2')

    @tatsumasu()
    def _row_(self):  # noqa

        def block0():
            self._cell_()
        self._closure(block0)

    @tatsumasu()
    def _file_(self):  # noqa

        def sep0():
            with self._group():
                self._token('\n')

        def block0():
            self._row_()
        self._gather(block0, sep0)


class SASCSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def cell(self, ast):  # noqa
        return ast

    def row(self, ast):  # noqa
        return ast

    def file(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = SASCParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, SASCParser, name='SASC')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
